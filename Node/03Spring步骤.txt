1. pom.xml
A)properties
B)依赖
	log4j，junit，mybatis，mysql-connector-java，
	spring-core,spring-beans,spring-context,spring-test
	spring-aop,spring-jdbc

C)mybatis-genderator

2. 生成代码
2.1 在src/test/resources中新建 mybatis-genderator的配制文件
2.2 修改配置，指定要生成的表
2.3 执行命令  mybatis-generator:generate 

3. 与Spring整合，src/main/resources新建spring配置文件
	新建的时候注意选择名称空间(namespace):aop,beans,context,tx
	
3.1 为什么要与Spring整合？
	因为Spring中有Ioc容器，可以解决依赖注入的问题。Mybatis中有一个非常重要的类SqlSessionFactory，有了它，Mybatis才能工作
	
	所以所谓的与spring整合其实就是让Spring来创建SqlSessionFactory对象。所以需要在Spring的配制文件中配制一个bean，这个bean是：
	org.mybatis.spring.SqlSessionFactoryBean
	注意这个类在Mybatis库中没有，Spring的库中也没有，所以在使用之前，还需要在maven的pom中引入依赖：
	<dependency>
	    <groupId>org.mybatis</groupId>
	    <artifactId>mybatis-spring</artifactId>
	    <version>1.3.1</version>
	</dependency>
	

3.2 Spring配置文件
	A)DataSource
	B)org.mybatis.spring.SqlSessionFactoryBean
	C)mybatis-spring:scan  这个步骤需要引入spring名称空间
	

3.3 编写测试用例

@RunWith(SpringRunner.class)
@ContextConfiguration(locations={"classpath:applicationContext.xml"})
public class AccountMapperTest {
	
	@Autowired
	private AccountMapper accountMapper;
	
	@Test
	public void testSave() {
		Account account=new Account();
		account.setAccount("adminabc");
		account.setPassword("123456");
		account.setCrateat(new Date());
		accountMapper.insert(account);
		
	}

}


@RunWith测试用例运行的时候需要用到Spring容器
@ContextConfiguration spring配置文件的位置
	
因为mybatis的mapper接口已经被Spring容器托管了，所以可以自动注入


	